
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E71AFE16293C9410A5E157FAB8B43651'
    
_lr_action_items = {'IF':([0,17,31,49,],[4,4,4,4,]),'NUMBER':([0,1,4,6,12,17,20,21,22,23,24,25,27,31,40,42,46,49,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'(':([0,1,2,4,6,12,17,20,21,22,23,24,25,27,31,40,42,46,49,],[6,6,16,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'>':([5,8,10,13,14,15,18,19,26,32,33,34,35,36,37,38,39,43,45,47,],[-11,21,-16,-12,21,-12,21,21,21,-13,21,21,21,21,21,21,21,21,21,21,]),'{':([5,10,15,18,32,33,34,37,38,48,],[-11,-16,-12,31,-13,-10,-15,-14,-9,49,]),'REP':([5,8,10,13,15,32,33,34,37,38,],[-11,22,-16,-12,-12,-13,-10,-15,-14,-9,]),'<':([5,8,10,13,14,15,18,19,26,32,33,34,35,36,37,38,39,43,45,47,],[-11,24,-16,-12,24,-12,24,24,24,-13,24,-15,24,24,24,24,24,24,24,24,]),'DEL':([5,8,10,13,15,32,33,34,37,38,],[-11,23,-16,-12,-12,-13,-10,-15,-14,-9,]),'CHAR':([0,1,4,6,12,17,20,21,22,23,24,25,27,31,40,42,46,49,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),';':([3,5,7,10,11,14,15,26,28,32,33,34,35,36,37,38,39,43,44,45,51,],[17,-11,-5,-16,-6,-8,-12,-7,40,-13,-10,-15,42,-3,-14,-9,-17,46,-18,-4,-19,]),'ADD_OP':([5,8,10,13,14,15,18,19,26,32,33,34,35,36,37,38,39,43,45,47,],[-11,25,-16,-12,25,-12,25,25,25,-13,-10,-15,25,25,-14,-9,25,25,25,25,]),'MUL_OP':([5,8,10,13,14,15,18,19,26,32,33,34,35,36,37,38,39,43,45,47,],[-11,20,-16,-12,20,-12,20,20,20,-13,-10,-15,20,20,-14,20,20,20,20,20,]),'LINE':([0,17,31,49,],[12,12,12,12,]),'SIZE':([0,17,31,49,],[1,1,1,1,]),')':([5,10,15,19,32,33,34,37,38,47,],[-11,-16,-12,32,-13,-10,-15,-14,-9,48,]),'=':([13,29,],[27,27,]),'FOR':([0,17,31,49,],[2,2,2,2,]),'IDENTIFIER':([0,1,4,6,12,16,17,20,21,22,23,24,25,27,31,40,42,46,49,],[13,15,15,15,15,29,13,15,15,15,15,15,15,15,13,15,15,15,13,]),'$end':([3,5,7,9,10,11,14,15,26,30,32,33,34,36,37,38,39,44,45,51,],[-1,-11,-5,0,-16,-6,-8,-12,-7,-2,-13,-10,-15,-3,-14,-9,-17,-18,-4,-19,]),'}':([3,5,7,10,11,14,15,26,30,32,33,34,36,37,38,39,41,44,45,50,51,],[-1,-11,-5,-16,-6,-8,-12,-7,-2,-13,-10,-15,-3,-14,-9,-17,44,-18,-4,51,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignation':([0,16,17,31,49,],[7,28,7,7,7,]),'statement':([0,17,31,49,],[3,3,3,3,]),'programme':([0,17,31,49,],[9,30,41,50,]),'structure':([0,17,31,49,],[11,11,11,11,]),'expression':([0,1,4,6,12,17,20,21,22,23,24,25,27,31,40,42,46,49,],[8,14,18,19,26,8,33,34,35,36,37,38,39,8,43,45,47,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserProjet.py',10),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserProjet.py',14),
  ('statement -> expression DEL expression','statement',3,'p_statement_del','parserProjet.py',20),
  ('statement -> expression REP expression ; expression','statement',5,'p_statement_rep','parserProjet.py',24),
  ('statement -> assignation','statement',1,'p_statement','parserProjet.py',28),
  ('statement -> structure','statement',1,'p_statement','parserProjet.py',29),
  ('statement -> LINE expression','statement',2,'p_statement_line','parserProjet.py',33),
  ('statement -> SIZE expression','statement',2,'p_statement_size','parserProjet.py',37),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserProjet.py',44),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserProjet.py',45),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserProjet.py',49),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserProjet.py',50),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserProjet.py',54),
  ('expression -> expression < expression','expression',3,'p_expression_less','parserProjet.py',58),
  ('expression -> expression > expression','expression',3,'p_expression_more','parserProjet.py',62),
  ('expression -> CHAR','expression',1,'p_expression_char','parserProjet.py',66),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserProjet.py',72),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parserProjet.py',79),
  ('structure -> FOR ( assignation ; expression ; expression ) { programme }','structure',11,'p_structure_for','parserProjet.py',83),
]
