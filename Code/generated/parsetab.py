
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '44698D42D8C2F9EAC93A9AD25FB68DC9'
    
_lr_action_items = {'LINE':([0,18,24,],[1,1,1,]),'IF':([0,18,24,],[2,2,2,]),'>':([9,10,11,12,14,15,16,23,25,27,28,29,30,31,],[-11,-10,20,-12,-16,20,20,20,20,20,20,20,20,-13,]),';':([6,7,8,9,10,11,12,14,16,25,27,28,29,30,31,33,],[-5,18,-4,-11,-10,-6,-12,-16,-7,-17,-9,-15,-8,-14,-13,-2,]),'}':([6,7,8,9,10,11,12,14,16,25,26,27,28,29,30,31,32,33,],[-5,-1,-4,-11,-10,-6,-12,-16,-7,-17,-3,-9,-15,-8,-14,-13,33,-2,]),'ADD_OP':([9,10,11,12,14,15,16,23,25,27,28,29,30,31,],[-11,-10,21,-12,-16,21,21,21,21,-9,-15,-8,-14,-13,]),')':([9,10,12,14,23,27,28,29,30,31,],[-11,-10,-12,-16,31,-9,-15,-8,-14,-13,]),'SIZE':([0,18,24,],[3,3,3,]),'IDENTIFIER':([0,1,2,3,13,17,18,19,20,21,22,24,],[4,9,9,9,9,9,4,9,9,9,9,4,]),'NUMBER':([1,2,3,13,17,19,20,21,22,],[10,10,10,10,10,10,10,10,10,]),'{':([9,10,12,14,15,27,28,29,30,31,],[-11,-10,-12,-16,24,-9,-15,-8,-14,-13,]),'(':([1,2,3,13,17,19,20,21,22,],[13,13,13,13,13,13,13,13,13,]),'MAT':([1,2,3,13,17,19,20,21,22,],[12,12,12,12,12,12,12,12,12,]),'$end':([5,6,7,8,9,10,11,12,14,16,25,26,27,28,29,30,31,33,],[0,-5,-1,-4,-11,-10,-6,-12,-16,-7,-17,-3,-9,-15,-8,-14,-13,-2,]),'=':([4,],[17,]),'MUL_OP':([9,10,11,12,14,15,16,23,25,27,28,29,30,31,],[-11,-10,19,-12,-16,19,19,19,19,-9,-15,19,-14,-13,]),'<':([9,10,11,12,14,15,16,23,25,27,28,29,30,31,],[-11,-10,22,-12,-16,22,22,22,22,22,-15,22,22,-13,]),'CHAR':([1,2,3,13,17,19,20,21,22,],[14,14,14,14,14,14,14,14,14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'structure':([0,18,24,],[6,6,6,]),'expression':([1,2,3,13,17,19,20,21,22,],[11,15,16,23,25,27,28,29,30,]),'programme':([0,18,24,],[5,26,32,]),'statement':([0,18,24,],[7,7,7,]),'assignation':([0,18,24,],[8,8,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserProjet.py',9),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parserProjet.py',13),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserProjet.py',17),
  ('statement -> assignation','statement',1,'p_statement','parserProjet.py',21),
  ('statement -> structure','statement',1,'p_statement','parserProjet.py',22),
  ('statement -> LINE expression','statement',2,'p_statement_line','parserProjet.py',26),
  ('statement -> SIZE expression','statement',2,'p_statement_size','parserProjet.py',30),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserProjet.py',34),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserProjet.py',35),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserProjet.py',39),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserProjet.py',40),
  ('expression -> MAT','expression',1,'p_expression_mat','parserProjet.py',44),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserProjet.py',48),
  ('expression -> expression < expression','expression',3,'p_expression_less','parserProjet.py',52),
  ('expression -> expression > expression','expression',3,'p_expression_more','parserProjet.py',56),
  ('expression -> CHAR','expression',1,'p_expression_char','parserProjet.py',60),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserProjet.py',64),
]
