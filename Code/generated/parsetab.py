
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '1AA2B4B9422B50B1E18D8ACE3A263E14'
    
_lr_action_items = {')':([9,12,14,17,25,30,31,32,34,36,44,],[-17,-11,-13,-12,36,-9,-16,-15,-10,-14,45,]),'ADD_OP':([7,8,9,12,14,16,17,18,25,26,30,31,32,33,34,35,36,42,44,],[19,-12,-17,-11,-13,19,-12,19,19,19,-9,-16,-15,19,-10,19,-14,19,19,]),'{':([9,12,14,16,17,30,31,32,34,36,45,],[-17,-11,-13,29,-12,-9,-16,-15,-10,-14,46,]),'IF':([0,15,29,46,],[3,3,3,3,]),'SIZE':([0,15,29,46,],[4,4,4,4,]),'DEL':([7,8,9,12,14,17,30,31,32,34,36,],[22,-12,-17,-11,-13,-12,-9,-16,-15,-10,-14,]),'$end':([1,2,5,6,9,12,14,17,18,26,28,30,31,32,33,34,35,36,41,48,],[-1,0,-5,-6,-17,-11,-13,-12,-8,-7,-4,-9,-16,-15,-18,-10,-19,-14,-2,-3,]),'(':([0,3,4,10,11,13,15,19,20,21,22,23,24,29,40,43,46,],[10,10,10,10,10,27,10,10,10,10,10,10,10,10,10,10,10,]),'IDENTIFIER':([0,3,4,10,11,15,19,20,21,22,23,24,27,29,40,43,46,],[8,17,17,17,17,8,17,17,17,17,17,17,37,8,17,17,8,]),'CHAR':([0,3,4,10,11,15,19,20,21,22,23,24,29,40,43,46,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),';':([1,5,6,9,12,14,17,18,26,30,31,32,33,34,35,36,38,41,42,48,],[15,-5,-6,-17,-11,-13,-12,-8,-7,-9,-16,-15,-18,-10,-19,-14,40,-2,43,-3,]),'}':([1,5,6,9,12,14,17,18,26,28,30,31,32,33,34,35,36,39,41,47,48,],[-1,-5,-6,-17,-11,-13,-12,-8,-7,-4,-9,-16,-15,-18,-10,-19,-14,41,-2,48,-3,]),'LINE':([0,15,29,46,],[11,11,11,11,]),'<':([7,8,9,12,14,16,17,18,25,26,30,31,32,33,34,35,36,42,44,],[21,-12,-17,-11,-13,21,-12,21,21,21,21,-16,21,21,21,21,-14,21,21,]),'NUMBER':([0,3,4,10,11,15,19,20,21,22,23,24,29,40,43,46,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'=':([8,37,],[24,24,]),'MAT':([0,3,4,10,11,15,19,20,21,22,23,24,29,40,43,46,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'FOR':([0,15,29,46,],[13,13,13,13,]),'MUL_OP':([7,8,9,12,14,16,17,18,25,26,30,31,32,33,34,35,36,42,44,],[23,-12,-17,-11,-13,23,-12,23,23,23,23,-16,-15,23,-10,23,-14,23,23,]),'>':([7,8,9,12,14,16,17,18,25,26,30,31,32,33,34,35,36,42,44,],[20,-12,-17,-11,-13,20,-12,20,20,20,20,20,20,20,20,20,-14,20,20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,15,29,46,],[2,28,39,47,]),'assignation':([0,15,27,29,46,],[5,5,38,5,5,]),'statement':([0,15,29,46,],[1,1,1,1,]),'expression':([0,3,4,10,11,15,19,20,21,22,23,24,29,40,43,46,],[7,16,18,25,26,7,30,31,32,33,34,35,7,42,44,7,]),'structure':([0,15,29,46,],[6,6,6,6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserProjet.py',9),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parserProjet.py',13),
  ('structure -> FOR ( assignation ; expression ; expression ) { programme }','structure',11,'p_structure_for','parserProjet.py',17),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserProjet.py',21),
  ('statement -> assignation','statement',1,'p_statement','parserProjet.py',25),
  ('statement -> structure','statement',1,'p_statement','parserProjet.py',26),
  ('statement -> LINE expression','statement',2,'p_statement_line','parserProjet.py',30),
  ('statement -> SIZE expression','statement',2,'p_statement_size','parserProjet.py',34),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserProjet.py',38),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserProjet.py',39),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserProjet.py',43),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserProjet.py',44),
  ('expression -> MAT','expression',1,'p_expression_mat','parserProjet.py',48),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserProjet.py',52),
  ('expression -> expression < expression','expression',3,'p_expression_less','parserProjet.py',56),
  ('expression -> expression > expression','expression',3,'p_expression_more','parserProjet.py',60),
  ('expression -> CHAR','expression',1,'p_expression_char','parserProjet.py',64),
  ('statement -> expression DEL expression','statement',3,'p_statement_del','parserProjet.py',68),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserProjet.py',72),
]
