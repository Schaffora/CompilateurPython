
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E71AFE16293C9410A5E157FAB8B43651'
    
_lr_action_items = {'{':([1,12,15,27,28,33,35,36,37,48,],[-11,-16,-12,39,-13,-15,-9,-10,-14,49,]),'<':([1,8,11,12,14,15,16,17,27,28,29,33,34,35,36,37,38,43,44,47,],[-11,-12,25,-16,25,-12,25,25,25,-13,25,-15,25,25,25,25,25,25,25,25,]),'>':([1,8,11,12,14,15,16,17,27,28,29,33,34,35,36,37,38,43,44,47,],[-11,-12,21,-16,21,-12,21,21,21,-13,21,21,21,21,21,21,21,21,21,21,]),'NUMBER':([0,2,4,7,13,18,20,21,22,23,24,25,26,39,40,41,46,49,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'MUL_OP':([1,8,11,12,14,15,16,17,27,28,29,33,34,35,36,37,38,43,44,47,],[-11,-12,24,-16,24,-12,24,24,24,-13,24,-15,24,24,-10,-14,24,24,24,24,]),')':([1,12,15,16,28,33,35,36,37,47,],[-11,-16,-12,28,-13,-15,-9,-10,-14,48,]),'FOR':([0,20,39,49,],[9,9,9,9,]),'LINE':([0,20,39,49,],[2,2,2,2,]),'(':([0,2,4,7,9,13,18,20,21,22,23,24,25,26,39,40,41,46,49,],[4,4,4,4,19,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'DEL':([1,8,11,12,15,28,33,35,36,37,],[-11,-12,22,-16,-12,-13,-15,-9,-10,-14,]),'REP':([1,8,11,12,15,28,33,35,36,37,],[-11,-12,26,-16,-12,-13,-15,-9,-10,-14,]),'=':([8,30,],[18,18,]),'SIZE':([0,20,39,49,],[7,7,7,7,]),';':([1,3,6,10,12,14,15,17,28,29,31,33,34,35,36,37,38,43,44,45,51,],[-11,-5,-6,20,-16,-7,-12,-8,-13,-17,40,-15,-3,-9,-10,-14,41,46,-4,-18,-19,]),'}':([1,3,6,10,12,14,15,17,28,29,32,33,34,35,36,37,42,44,45,50,51,],[-11,-5,-6,-1,-16,-7,-12,-8,-13,-17,-2,-15,-3,-9,-10,-14,45,-4,-18,51,-19,]),'IF':([0,20,39,49,],[13,13,13,13,]),'ADD_OP':([1,8,11,12,14,15,16,17,27,28,29,33,34,35,36,37,38,43,44,47,],[-11,-12,23,-16,23,-12,23,23,23,-13,23,-15,23,-9,-10,-14,23,23,23,23,]),'IDENTIFIER':([0,2,4,7,13,18,19,20,21,22,23,24,25,26,39,40,41,46,49,],[8,15,15,15,15,15,30,8,15,15,15,15,15,15,8,15,15,15,8,]),'$end':([1,3,5,6,10,12,14,15,17,28,29,32,33,34,35,36,37,44,45,51,],[-11,-5,0,-6,-1,-16,-7,-12,-8,-13,-17,-2,-15,-3,-9,-10,-14,-4,-18,-19,]),'CHAR':([0,2,4,7,13,18,20,21,22,23,24,25,26,39,40,41,46,49,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,7,13,18,20,21,22,23,24,25,26,39,40,41,46,49,],[11,14,16,17,27,29,11,33,34,35,36,37,38,11,43,44,47,11,]),'programme':([0,20,39,49,],[5,32,42,50,]),'assignation':([0,19,20,39,49,],[3,31,3,3,3,]),'structure':([0,20,39,49,],[6,6,6,6,]),'statement':([0,20,39,49,],[10,10,10,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserProjet.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserProjet.py',13),
  ('statement -> expression DEL expression','statement',3,'p_statement_del','parserProjet.py',17),
  ('statement -> expression REP expression ; expression','statement',5,'p_statement_rep','parserProjet.py',21),
  ('statement -> assignation','statement',1,'p_statement','parserProjet.py',25),
  ('statement -> structure','statement',1,'p_statement','parserProjet.py',26),
  ('statement -> LINE expression','statement',2,'p_statement_line','parserProjet.py',30),
  ('statement -> SIZE expression','statement',2,'p_statement_size','parserProjet.py',34),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserProjet.py',38),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserProjet.py',39),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserProjet.py',43),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserProjet.py',44),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserProjet.py',48),
  ('expression -> expression < expression','expression',3,'p_expression_less','parserProjet.py',52),
  ('expression -> expression > expression','expression',3,'p_expression_more','parserProjet.py',56),
  ('expression -> CHAR','expression',1,'p_expression_char','parserProjet.py',60),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserProjet.py',64),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parserProjet.py',68),
  ('structure -> FOR ( assignation ; expression ; expression ) { programme }','structure',11,'p_structure_for','parserProjet.py',72),
]
