
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E71AFE16293C9410A5E157FAB8B43651'
    
_lr_action_items = {'MUL_OP':([5,11,12,13,14,15,16,17,25,30,31,32,33,34,35,36,39,44,45,47,],[19,-16,-11,-12,19,-12,19,19,19,-10,-14,19,19,-15,19,-13,19,19,19,19,]),'}':([4,7,8,11,12,14,15,17,29,30,31,33,34,35,36,39,40,43,44,50,51,],[-1,-5,-6,-16,-11,-8,-12,-7,-2,-10,-14,-3,-15,-9,-13,-17,43,-18,-4,51,-19,]),'{':([11,12,15,16,30,31,34,35,36,48,],[-16,-11,-12,28,-10,-14,-15,-9,-13,49,]),'SIZE':([0,18,28,49,],[1,1,1,1,]),'FOR':([0,18,28,49,],[9,9,9,9,]),'IF':([0,18,28,49,],[2,2,2,2,]),'=':([13,38,],[27,27,]),'$end':([4,7,8,10,11,12,14,15,17,29,30,31,33,34,35,36,39,43,44,51,],[-1,-5,-6,0,-16,-11,-8,-12,-7,-2,-10,-14,-3,-15,-9,-13,-17,-18,-4,-19,]),'LINE':([0,18,28,49,],[3,3,3,3,]),'CHAR':([0,1,2,3,6,18,19,20,21,22,23,24,27,28,41,42,46,49,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'<':([5,11,12,13,14,15,16,17,25,30,31,32,33,34,35,36,39,44,45,47,],[20,-16,-11,-12,20,-12,20,20,20,20,20,20,20,-15,20,-13,20,20,20,20,]),')':([11,12,15,25,30,31,34,35,36,47,],[-16,-11,-12,36,-10,-14,-15,-9,-13,48,]),'REP':([5,11,12,13,15,30,31,34,35,36,],[21,-16,-11,-12,-12,-10,-14,-15,-9,-13,]),'NUMBER':([0,1,2,3,6,18,19,20,21,22,23,24,27,28,41,42,46,49,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'ADD_OP':([5,11,12,13,14,15,16,17,25,30,31,32,33,34,35,36,39,44,45,47,],[24,-16,-11,-12,24,-12,24,24,24,-10,-14,24,24,-15,-9,-13,24,24,24,24,]),';':([4,7,8,11,12,14,15,17,30,31,32,33,34,35,36,37,39,43,44,45,51,],[18,-5,-6,-16,-11,-8,-12,-7,-10,-14,41,-3,-15,-9,-13,42,-17,-18,-4,46,-19,]),'(':([0,1,2,3,6,9,18,19,20,21,22,23,24,27,28,41,42,46,49,],[6,6,6,6,6,26,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'DEL':([5,11,12,13,15,30,31,34,35,36,],[22,-16,-11,-12,-12,-10,-14,-15,-9,-13,]),'>':([5,11,12,13,14,15,16,17,25,30,31,32,33,34,35,36,39,44,45,47,],[23,-16,-11,-12,23,-12,23,23,23,23,23,23,23,23,23,-13,23,23,23,23,]),'IDENTIFIER':([0,1,2,3,6,18,19,20,21,22,23,24,26,27,28,41,42,46,49,],[13,15,15,15,15,13,15,15,15,15,15,15,38,15,13,15,15,15,13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,18,28,49,],[10,29,40,50,]),'expression':([0,1,2,3,6,18,19,20,21,22,23,24,27,28,41,42,46,49,],[5,14,16,17,25,5,30,31,32,33,34,35,39,5,44,45,47,5,]),'statement':([0,18,28,49,],[4,4,4,4,]),'assignation':([0,18,26,28,49,],[7,7,37,7,7,]),'structure':([0,18,28,49,],[8,8,8,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserProjet.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserProjet.py',13),
  ('statement -> expression DEL expression','statement',3,'p_statement_del','parserProjet.py',17),
  ('statement -> expression REP expression ; expression','statement',5,'p_statement_rep','parserProjet.py',21),
  ('statement -> assignation','statement',1,'p_statement','parserProjet.py',25),
  ('statement -> structure','statement',1,'p_statement','parserProjet.py',26),
  ('statement -> LINE expression','statement',2,'p_statement_line','parserProjet.py',30),
  ('statement -> SIZE expression','statement',2,'p_statement_size','parserProjet.py',34),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserProjet.py',38),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserProjet.py',39),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserProjet.py',43),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserProjet.py',44),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserProjet.py',48),
  ('expression -> expression < expression','expression',3,'p_expression_less','parserProjet.py',52),
  ('expression -> expression > expression','expression',3,'p_expression_more','parserProjet.py',56),
  ('expression -> CHAR','expression',1,'p_expression_char','parserProjet.py',60),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserProjet.py',64),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parserProjet.py',68),
  ('structure -> FOR ( assignation ; expression ; expression ) { programme }','structure',11,'p_structure_for','parserProjet.py',72),
]
