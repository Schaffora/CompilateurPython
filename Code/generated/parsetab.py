
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '44698D42D8C2F9EAC93A9AD25FB68DC9'
    
_lr_action_items = {'MAT':([4,7,8,14,16,20,21,22,23,],[10,10,10,10,10,10,10,10,10,]),'ADD_OP':([10,11,12,13,15,17,18,24,25,27,28,29,30,31,],[-12,-10,20,-16,-11,20,20,20,20,-8,-9,-15,-14,-13,]),'NUMBER':([4,7,8,14,16,20,21,22,23,],[11,11,11,11,11,11,11,11,11,]),'}':([1,3,5,10,11,12,13,15,18,19,25,27,28,29,30,31,32,33,],[-1,-4,-5,-12,-10,-7,-16,-11,-6,-3,-17,-8,-9,-15,-14,-13,33,-2,]),'MUL_OP':([10,11,12,13,15,17,18,24,25,27,28,29,30,31,],[-12,-10,21,-16,-11,21,21,21,21,21,-9,-15,-14,-13,]),'>':([10,11,12,13,15,17,18,24,25,27,28,29,30,31,],[-12,-10,22,-16,-11,22,22,22,22,22,22,22,22,-13,]),'<':([10,11,12,13,15,17,18,24,25,27,28,29,30,31,],[-12,-10,23,-16,-11,23,23,23,23,23,23,-15,23,-13,]),'=':([6,],[16,]),'CHAR':([4,7,8,14,16,20,21,22,23,],[13,13,13,13,13,13,13,13,13,]),'SIZE':([0,9,26,],[4,4,4,]),')':([10,11,13,15,24,27,28,29,30,31,],[-12,-10,-16,-11,31,-8,-9,-15,-14,-13,]),'(':([4,7,8,14,16,20,21,22,23,],[14,14,14,14,14,14,14,14,14,]),';':([1,3,5,10,11,12,13,15,18,25,27,28,29,30,31,33,],[9,-4,-5,-12,-10,-7,-16,-11,-6,-17,-8,-9,-15,-14,-13,-2,]),'{':([10,11,13,15,17,27,28,29,30,31,],[-12,-10,-16,-11,26,-8,-9,-15,-14,-13,]),'IDENTIFIER':([0,4,7,8,9,14,16,20,21,22,23,26,],[6,15,15,15,6,15,15,15,15,15,15,6,]),'IF':([0,9,26,],[7,7,7,]),'$end':([1,2,3,5,10,11,12,13,15,18,19,25,27,28,29,30,31,33,],[-1,0,-4,-5,-12,-10,-7,-16,-11,-6,-3,-17,-8,-9,-15,-14,-13,-2,]),'LINE':([0,9,26,],[8,8,8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,9,26,],[1,1,1,]),'programme':([0,9,26,],[2,19,32,]),'expression':([4,7,8,14,16,20,21,22,23,],[12,17,18,24,25,27,28,29,30,]),'structure':([0,9,26,],[5,5,5,]),'assignation':([0,9,26,],[3,3,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserProjet.py',9),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parserProjet.py',13),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserProjet.py',17),
  ('statement -> assignation','statement',1,'p_statement','parserProjet.py',21),
  ('statement -> structure','statement',1,'p_statement','parserProjet.py',22),
  ('statement -> LINE expression','statement',2,'p_statement_line','parserProjet.py',26),
  ('statement -> SIZE expression','statement',2,'p_statement_size','parserProjet.py',30),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserProjet.py',34),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserProjet.py',35),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserProjet.py',39),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserProjet.py',40),
  ('expression -> MAT','expression',1,'p_expression_mat','parserProjet.py',44),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserProjet.py',48),
  ('expression -> expression < expression','expression',3,'p_expression_less','parserProjet.py',52),
  ('expression -> expression > expression','expression',3,'p_expression_more','parserProjet.py',56),
  ('expression -> CHAR','expression',1,'p_expression_char','parserProjet.py',60),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserProjet.py',64),
]
