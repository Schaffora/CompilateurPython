
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '0AC9249EC904D90CA06BBF310D2BB20C'
    
_lr_action_items = {'MUL_OP':([8,9,10,11,12,13,17,18,],[-10,-7,15,-8,-9,15,-6,15,]),'$end':([2,3,5,8,9,10,11,12,13,14,17,18,],[-3,-1,0,-10,-7,-4,-8,-9,-11,-2,-6,-5,]),'=':([1,],[6,]),'LINE':([0,7,],[4,4,]),'NUMBER':([4,6,15,16,],[9,9,9,9,]),'CHAR':([4,6,15,16,],[8,8,8,8,]),'IDENTIFIER':([0,4,6,7,15,16,],[1,11,11,1,11,11,]),'ADD_OP':([8,9,10,11,12,13,17,18,],[-10,-7,16,-8,-9,16,-6,-5,]),'MAT':([4,6,15,16,],[12,12,12,12,]),';':([2,3,8,9,10,11,12,13,17,18,],[-3,7,-10,-7,-4,-8,-9,-11,-6,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignation':([0,7,],[2,2,]),'expression':([4,6,15,16,],[10,13,17,18,]),'statement':([0,7,],[3,3,]),'programme':([0,7,],[5,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserProjet.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserProjet.py',13),
  ('statement -> assignation','statement',1,'p_statement','parserProjet.py',17),
  ('statement -> LINE expression','statement',2,'p_statement_line','parserProjet.py',21),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserProjet.py',25),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserProjet.py',26),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserProjet.py',30),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserProjet.py',31),
  ('expression -> MAT','expression',1,'p_expression_mat','parserProjet.py',35),
  ('expression -> CHAR','expression',1,'p_expression_char','parserProjet.py',39),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserProjet.py',43),
]
