
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '44698D42D8C2F9EAC93A9AD25FB68DC9'
    
_lr_action_items = {'(':([1,3,5,9,17,20,21,22,23,],[9,9,9,9,9,9,9,9,9,]),'LINE':([0,15,25,],[1,1,1,]),'}':([2,7,8,10,11,12,13,14,18,24,26,27,28,29,30,31,32,33,],[-1,-5,-4,-12,-11,-16,-10,-6,-7,-3,-17,-13,-9,-14,-8,-15,33,-2,]),'MAT':([1,3,5,9,17,20,21,22,23,],[10,10,10,10,10,10,10,10,10,]),';':([2,7,8,10,11,12,13,14,18,26,27,28,29,30,31,33,],[15,-5,-4,-12,-11,-16,-10,-6,-7,-17,-13,-9,-14,-8,-15,-2,]),')':([10,11,12,13,19,27,28,29,30,31,],[-12,-11,-16,-10,27,-13,-9,-14,-8,-15,]),'<':([10,11,12,13,14,16,18,19,26,27,28,29,30,31,],[-12,-11,-16,-10,21,21,21,21,21,-13,21,21,21,-15,]),'=':([4,],[17,]),'>':([10,11,12,13,14,16,18,19,26,27,28,29,30,31,],[-12,-11,-16,-10,23,23,23,23,23,-13,23,23,23,23,]),'IF':([0,15,25,],[3,3,3,]),'IDENTIFIER':([0,1,3,5,9,15,17,20,21,22,23,25,],[4,11,11,11,11,4,11,11,11,11,11,4,]),'CHAR':([1,3,5,9,17,20,21,22,23,],[12,12,12,12,12,12,12,12,12,]),'NUMBER':([1,3,5,9,17,20,21,22,23,],[13,13,13,13,13,13,13,13,13,]),'$end':([2,6,7,8,10,11,12,13,14,18,24,26,27,28,29,30,31,33,],[-1,0,-5,-4,-12,-11,-16,-10,-6,-7,-3,-17,-13,-9,-14,-8,-15,-2,]),'SIZE':([0,15,25,],[5,5,5,]),'{':([10,11,12,13,16,27,28,29,30,31,],[-12,-11,-16,-10,25,-13,-9,-14,-8,-15,]),'ADD_OP':([10,11,12,13,14,16,18,19,26,27,28,29,30,31,],[-12,-11,-16,-10,22,22,22,22,22,-13,-9,-14,-8,-15,]),'MUL_OP':([10,11,12,13,14,16,18,19,26,27,28,29,30,31,],[-12,-11,-16,-10,20,20,20,20,20,-13,-9,-14,20,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,15,25,],[6,24,32,]),'structure':([0,15,25,],[7,7,7,]),'statement':([0,15,25,],[2,2,2,]),'assignation':([0,15,25,],[8,8,8,]),'expression':([1,3,5,9,17,20,21,22,23,],[14,16,18,19,26,28,29,30,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserProjet.py',9),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parserProjet.py',13),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserProjet.py',17),
  ('statement -> assignation','statement',1,'p_statement','parserProjet.py',21),
  ('statement -> structure','statement',1,'p_statement','parserProjet.py',22),
  ('statement -> LINE expression','statement',2,'p_statement_line','parserProjet.py',26),
  ('statement -> SIZE expression','statement',2,'p_statement_size','parserProjet.py',30),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserProjet.py',34),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserProjet.py',35),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserProjet.py',39),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserProjet.py',40),
  ('expression -> MAT','expression',1,'p_expression_mat','parserProjet.py',44),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserProjet.py',48),
  ('expression -> expression < expression','expression',3,'p_expression_less','parserProjet.py',52),
  ('expression -> expression > expression','expression',3,'p_expression_more','parserProjet.py',56),
  ('expression -> CHAR','expression',1,'p_expression_char','parserProjet.py',60),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserProjet.py',64),
]
