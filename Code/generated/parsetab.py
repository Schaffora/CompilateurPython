
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '1CD99BE4C7F479CEDEF077E4CA19680F'
    
_lr_action_items = {'IDENTIFIER':([0,3,5,8,9,13,17,20,21,22,24,],[1,10,10,10,10,10,1,10,10,10,1,]),'MUL_OP':([10,11,12,14,15,16,18,19,23,26,27,28,29,],[-11,-10,20,-15,-12,20,20,20,20,-9,-14,20,-13,]),'NUMBER':([3,5,8,9,13,20,21,22,],[11,11,11,11,11,11,11,11,]),'}':([2,4,7,10,11,12,14,15,18,19,25,26,27,28,29,30,31,],[-5,-4,-1,-11,-10,-6,-15,-12,-7,-16,-3,-9,-14,-8,-13,31,-2,]),'=':([1,],[9,]),'<':([10,11,12,14,15,16,18,19,23,26,27,28,29,],[-11,-10,21,-15,-12,21,21,21,21,21,21,21,-13,]),'$end':([2,4,6,7,10,11,12,14,15,18,19,25,26,27,28,29,31,],[-5,-4,0,-1,-11,-10,-6,-15,-12,-7,-16,-3,-9,-14,-8,-13,-2,]),'{':([10,11,14,15,16,26,27,28,29,],[-11,-10,-15,-12,24,-9,-14,-8,-13,]),'IF':([0,17,24,],[5,5,5,]),'ADD_OP':([10,11,12,14,15,16,18,19,23,26,27,28,29,],[-11,-10,22,-15,-12,22,22,22,22,-9,-14,-8,-13,]),')':([10,11,14,15,23,26,27,28,29,],[-11,-10,-15,-12,29,-9,-14,-8,-13,]),';':([2,4,7,10,11,12,14,15,18,19,26,27,28,29,31,],[-5,-4,17,-11,-10,-6,-15,-12,-7,-16,-9,-14,-8,-13,-2,]),'(':([3,5,8,9,13,20,21,22,],[13,13,13,13,13,13,13,13,]),'CHAR':([3,5,8,9,13,20,21,22,],[14,14,14,14,14,14,14,14,]),'SIZE':([0,17,24,],[8,8,8,]),'MAT':([3,5,8,9,13,20,21,22,],[15,15,15,15,15,15,15,15,]),'LINE':([0,17,24,],[3,3,3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,17,24,],[6,25,30,]),'expression':([3,5,8,9,13,20,21,22,],[12,16,18,19,23,26,27,28,]),'assignation':([0,17,24,],[4,4,4,]),'statement':([0,17,24,],[7,7,7,]),'structure':([0,17,24,],[2,2,2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parserProjet.py',9),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parserProjet.py',13),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parserProjet.py',17),
  ('statement -> assignation','statement',1,'p_statement','parserProjet.py',21),
  ('statement -> structure','statement',1,'p_statement','parserProjet.py',22),
  ('statement -> LINE expression','statement',2,'p_statement_line','parserProjet.py',26),
  ('statement -> SIZE expression','statement',2,'p_statement_size','parserProjet.py',30),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parserProjet.py',34),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parserProjet.py',35),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parserProjet.py',39),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parserProjet.py',40),
  ('expression -> MAT','expression',1,'p_expression_mat','parserProjet.py',44),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parserProjet.py',48),
  ('expression -> expression < expression','expression',3,'p_expression_less','parserProjet.py',52),
  ('expression -> CHAR','expression',1,'p_expression_char','parserProjet.py',56),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parserProjet.py',60),
]
