Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     structure -> IF expression { programme }
Rule 3     programme -> statement ; programme
Rule 4     statement -> assignation
Rule 5     statement -> structure
Rule 6     statement -> LINE expression
Rule 7     statement -> SIZE expression
Rule 8     expression -> expression ADD_OP expression
Rule 9     expression -> expression MUL_OP expression
Rule 10    expression -> NUMBER
Rule 11    expression -> IDENTIFIER
Rule 12    expression -> MAT
Rule 13    expression -> ( expression )
Rule 14    expression -> expression < expression
Rule 15    expression -> CHAR
Rule 16    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 13
)                    : 13
;                    : 3
<                    : 14
=                    : 16
ADD_OP               : 8
CHAR                 : 15
IDENTIFIER           : 11 16
IF                   : 2
LINE                 : 6
MAT                  : 12
MUL_OP               : 9
NUMBER               : 10
SIZE                 : 7
error                : 
{                    : 2
}                    : 2

Nonterminals, with rules where they appear

assignation          : 4
expression           : 2 6 7 8 8 9 9 13 14 14 16
programme            : 2 3 0
statement            : 1 3
structure            : 5

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (3) programme -> . statement ; programme
    (4) statement -> . assignation
    (5) statement -> . structure
    (6) statement -> . LINE expression
    (7) statement -> . SIZE expression
    (16) assignation -> . IDENTIFIER = expression
    (2) structure -> . IF expression { programme }

    LINE            shift and go to state 3
    SIZE            shift and go to state 8
    IDENTIFIER      shift and go to state 1
    IF              shift and go to state 5

    programme                      shift and go to state 6
    assignation                    shift and go to state 4
    statement                      shift and go to state 7
    structure                      shift and go to state 2

state 1

    (16) assignation -> IDENTIFIER . = expression

    =               shift and go to state 9


state 2

    (5) statement -> structure .

    ;               reduce using rule 5 (statement -> structure .)
    $end            reduce using rule 5 (statement -> structure .)
    }               reduce using rule 5 (statement -> structure .)


state 3

    (6) statement -> LINE . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . MAT
    (13) expression -> . ( expression )
    (14) expression -> . expression < expression
    (15) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 10
    MAT             shift and go to state 15
    (               shift and go to state 13
    CHAR            shift and go to state 14

    expression                     shift and go to state 12

state 4

    (4) statement -> assignation .

    ;               reduce using rule 4 (statement -> assignation .)
    $end            reduce using rule 4 (statement -> assignation .)
    }               reduce using rule 4 (statement -> assignation .)


state 5

    (2) structure -> IF . expression { programme }
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . MAT
    (13) expression -> . ( expression )
    (14) expression -> . expression < expression
    (15) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 10
    MAT             shift and go to state 15
    (               shift and go to state 13
    CHAR            shift and go to state 14

    expression                     shift and go to state 16

state 6

    (0) S' -> programme .



state 7

    (1) programme -> statement .
    (3) programme -> statement . ; programme

    }               reduce using rule 1 (programme -> statement .)
    $end            reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 17


state 8

    (7) statement -> SIZE . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . MAT
    (13) expression -> . ( expression )
    (14) expression -> . expression < expression
    (15) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 10
    MAT             shift and go to state 15
    (               shift and go to state 13
    CHAR            shift and go to state 14

    expression                     shift and go to state 18

state 9

    (16) assignation -> IDENTIFIER = . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . MAT
    (13) expression -> . ( expression )
    (14) expression -> . expression < expression
    (15) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 10
    MAT             shift and go to state 15
    (               shift and go to state 13
    CHAR            shift and go to state 14

    expression                     shift and go to state 19

state 10

    (11) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 11 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 11 (expression -> IDENTIFIER .)
    <               reduce using rule 11 (expression -> IDENTIFIER .)
    ;               reduce using rule 11 (expression -> IDENTIFIER .)
    $end            reduce using rule 11 (expression -> IDENTIFIER .)
    }               reduce using rule 11 (expression -> IDENTIFIER .)
    {               reduce using rule 11 (expression -> IDENTIFIER .)
    )               reduce using rule 11 (expression -> IDENTIFIER .)


state 11

    (10) expression -> NUMBER .

    ADD_OP          reduce using rule 10 (expression -> NUMBER .)
    MUL_OP          reduce using rule 10 (expression -> NUMBER .)
    <               reduce using rule 10 (expression -> NUMBER .)
    ;               reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)
    }               reduce using rule 10 (expression -> NUMBER .)
    {               reduce using rule 10 (expression -> NUMBER .)
    )               reduce using rule 10 (expression -> NUMBER .)


state 12

    (6) statement -> LINE expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (14) expression -> expression . < expression

    ;               reduce using rule 6 (statement -> LINE expression .)
    $end            reduce using rule 6 (statement -> LINE expression .)
    }               reduce using rule 6 (statement -> LINE expression .)
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 20
    <               shift and go to state 21


state 13

    (13) expression -> ( . expression )
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . MAT
    (13) expression -> . ( expression )
    (14) expression -> . expression < expression
    (15) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 10
    MAT             shift and go to state 15
    (               shift and go to state 13
    CHAR            shift and go to state 14

    expression                     shift and go to state 23

state 14

    (15) expression -> CHAR .

    ADD_OP          reduce using rule 15 (expression -> CHAR .)
    MUL_OP          reduce using rule 15 (expression -> CHAR .)
    <               reduce using rule 15 (expression -> CHAR .)
    ;               reduce using rule 15 (expression -> CHAR .)
    $end            reduce using rule 15 (expression -> CHAR .)
    }               reduce using rule 15 (expression -> CHAR .)
    {               reduce using rule 15 (expression -> CHAR .)
    )               reduce using rule 15 (expression -> CHAR .)


state 15

    (12) expression -> MAT .

    ADD_OP          reduce using rule 12 (expression -> MAT .)
    MUL_OP          reduce using rule 12 (expression -> MAT .)
    <               reduce using rule 12 (expression -> MAT .)
    ;               reduce using rule 12 (expression -> MAT .)
    $end            reduce using rule 12 (expression -> MAT .)
    }               reduce using rule 12 (expression -> MAT .)
    {               reduce using rule 12 (expression -> MAT .)
    )               reduce using rule 12 (expression -> MAT .)


state 16

    (2) structure -> IF expression . { programme }
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (14) expression -> expression . < expression

    {               shift and go to state 24
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 20
    <               shift and go to state 21


state 17

    (3) programme -> statement ; . programme
    (1) programme -> . statement
    (3) programme -> . statement ; programme
    (4) statement -> . assignation
    (5) statement -> . structure
    (6) statement -> . LINE expression
    (7) statement -> . SIZE expression
    (16) assignation -> . IDENTIFIER = expression
    (2) structure -> . IF expression { programme }

    LINE            shift and go to state 3
    SIZE            shift and go to state 8
    IDENTIFIER      shift and go to state 1
    IF              shift and go to state 5

    programme                      shift and go to state 25
    assignation                    shift and go to state 4
    statement                      shift and go to state 7
    structure                      shift and go to state 2

state 18

    (7) statement -> SIZE expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (14) expression -> expression . < expression

    ;               reduce using rule 7 (statement -> SIZE expression .)
    $end            reduce using rule 7 (statement -> SIZE expression .)
    }               reduce using rule 7 (statement -> SIZE expression .)
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 20
    <               shift and go to state 21


state 19

    (16) assignation -> IDENTIFIER = expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (14) expression -> expression . < expression

    ;               reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 16 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 20
    <               shift and go to state 21


state 20

    (9) expression -> expression MUL_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . MAT
    (13) expression -> . ( expression )
    (14) expression -> . expression < expression
    (15) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 10
    MAT             shift and go to state 15
    (               shift and go to state 13
    CHAR            shift and go to state 14

    expression                     shift and go to state 26

state 21

    (14) expression -> expression < . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . MAT
    (13) expression -> . ( expression )
    (14) expression -> . expression < expression
    (15) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 10
    MAT             shift and go to state 15
    (               shift and go to state 13
    CHAR            shift and go to state 14

    expression                     shift and go to state 27

state 22

    (8) expression -> expression ADD_OP . expression
    (8) expression -> . expression ADD_OP expression
    (9) expression -> . expression MUL_OP expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (12) expression -> . MAT
    (13) expression -> . ( expression )
    (14) expression -> . expression < expression
    (15) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 10
    MAT             shift and go to state 15
    (               shift and go to state 13
    CHAR            shift and go to state 14

    expression                     shift and go to state 28

state 23

    (13) expression -> ( expression . )
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (14) expression -> expression . < expression

    )               shift and go to state 29
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 20
    <               shift and go to state 21


state 24

    (2) structure -> IF expression { . programme }
    (1) programme -> . statement
    (3) programme -> . statement ; programme
    (4) statement -> . assignation
    (5) statement -> . structure
    (6) statement -> . LINE expression
    (7) statement -> . SIZE expression
    (16) assignation -> . IDENTIFIER = expression
    (2) structure -> . IF expression { programme }

    LINE            shift and go to state 3
    SIZE            shift and go to state 8
    IDENTIFIER      shift and go to state 1
    IF              shift and go to state 5

    programme                      shift and go to state 30
    assignation                    shift and go to state 4
    statement                      shift and go to state 7
    structure                      shift and go to state 2

state 25

    (3) programme -> statement ; programme .

    }               reduce using rule 3 (programme -> statement ; programme .)
    $end            reduce using rule 3 (programme -> statement ; programme .)


state 26

    (9) expression -> expression MUL_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (14) expression -> expression . < expression

    ADD_OP          reduce using rule 9 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 9 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 9 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 9 (expression -> expression MUL_OP expression .)
    }               reduce using rule 9 (expression -> expression MUL_OP expression .)
    {               reduce using rule 9 (expression -> expression MUL_OP expression .)
    )               reduce using rule 9 (expression -> expression MUL_OP expression .)
    <               shift and go to state 21

  ! <               [ reduce using rule 9 (expression -> expression MUL_OP expression .) ]
  ! ADD_OP          [ shift and go to state 22 ]
  ! MUL_OP          [ shift and go to state 20 ]


state 27

    (14) expression -> expression < expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (14) expression -> expression . < expression

    ADD_OP          reduce using rule 14 (expression -> expression < expression .)
    MUL_OP          reduce using rule 14 (expression -> expression < expression .)
    ;               reduce using rule 14 (expression -> expression < expression .)
    $end            reduce using rule 14 (expression -> expression < expression .)
    }               reduce using rule 14 (expression -> expression < expression .)
    {               reduce using rule 14 (expression -> expression < expression .)
    )               reduce using rule 14 (expression -> expression < expression .)
    <               shift and go to state 21

  ! <               [ reduce using rule 14 (expression -> expression < expression .) ]
  ! ADD_OP          [ shift and go to state 22 ]
  ! MUL_OP          [ shift and go to state 20 ]


state 28

    (8) expression -> expression ADD_OP expression .
    (8) expression -> expression . ADD_OP expression
    (9) expression -> expression . MUL_OP expression
    (14) expression -> expression . < expression

    ADD_OP          reduce using rule 8 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 8 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 8 (expression -> expression ADD_OP expression .)
    }               reduce using rule 8 (expression -> expression ADD_OP expression .)
    {               reduce using rule 8 (expression -> expression ADD_OP expression .)
    )               reduce using rule 8 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 20
    <               shift and go to state 21

  ! MUL_OP          [ reduce using rule 8 (expression -> expression ADD_OP expression .) ]
  ! <               [ reduce using rule 8 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 22 ]


state 29

    (13) expression -> ( expression ) .

    ADD_OP          reduce using rule 13 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 13 (expression -> ( expression ) .)
    <               reduce using rule 13 (expression -> ( expression ) .)
    ;               reduce using rule 13 (expression -> ( expression ) .)
    $end            reduce using rule 13 (expression -> ( expression ) .)
    }               reduce using rule 13 (expression -> ( expression ) .)
    {               reduce using rule 13 (expression -> ( expression ) .)
    )               reduce using rule 13 (expression -> ( expression ) .)


state 30

    (2) structure -> IF expression { programme . }

    }               shift and go to state 31


state 31

    (2) structure -> IF expression { programme } .

    ;               reduce using rule 2 (structure -> IF expression { programme } .)
    $end            reduce using rule 2 (structure -> IF expression { programme } .)
    }               reduce using rule 2 (structure -> IF expression { programme } .)

