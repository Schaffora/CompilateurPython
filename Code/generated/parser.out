Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     structure -> IF expression { programme }
Rule 3     structure -> FOR ( assignation ; expression ; expression ) { programme }
Rule 4     programme -> statement ; programme
Rule 5     statement -> assignation
Rule 6     statement -> structure
Rule 7     statement -> LINE expression
Rule 8     statement -> SIZE expression
Rule 9     expression -> expression ADD_OP expression
Rule 10    expression -> expression MUL_OP expression
Rule 11    expression -> NUMBER
Rule 12    expression -> IDENTIFIER
Rule 13    expression -> MAT
Rule 14    expression -> ( expression )
Rule 15    expression -> expression < expression
Rule 16    expression -> expression > expression
Rule 17    expression -> CHAR
Rule 18    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 3 14
)                    : 3 14
;                    : 3 3 4
<                    : 15
=                    : 18
>                    : 16
ADD_OP               : 9
CHAR                 : 17
FOR                  : 3
IDENTIFIER           : 12 18
IF                   : 2
LINE                 : 7
MAT                  : 13
MUL_OP               : 10
NUMBER               : 11
SIZE                 : 8
error                : 
{                    : 2 3
}                    : 2 3

Nonterminals, with rules where they appear

assignation          : 3 5
expression           : 2 3 3 7 8 9 9 10 10 14 15 15 16 16 18
programme            : 2 3 4 0
statement            : 1 4
structure            : 6

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (4) programme -> . statement ; programme
    (5) statement -> . assignation
    (6) statement -> . structure
    (7) statement -> . LINE expression
    (8) statement -> . SIZE expression
    (18) assignation -> . IDENTIFIER = expression
    (2) structure -> . IF expression { programme }
    (3) structure -> . FOR ( assignation ; expression ; expression ) { programme }

    LINE            shift and go to state 5
    SIZE            shift and go to state 2
    IDENTIFIER      shift and go to state 8
    IF              shift and go to state 7
    FOR             shift and go to state 4

    structure                      shift and go to state 1
    assignation                    shift and go to state 3
    programme                      shift and go to state 9
    statement                      shift and go to state 6

state 1

    (6) statement -> structure .

    ;               reduce using rule 6 (statement -> structure .)
    $end            reduce using rule 6 (statement -> structure .)
    }               reduce using rule 6 (statement -> structure .)


state 2

    (8) statement -> SIZE . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . NUMBER
    (12) expression -> . IDENTIFIER
    (13) expression -> . MAT
    (14) expression -> . ( expression )
    (15) expression -> . expression < expression
    (16) expression -> . expression > expression
    (17) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 13
    MAT             shift and go to state 12
    (               shift and go to state 14
    CHAR            shift and go to state 15

    expression                     shift and go to state 10

state 3

    (5) statement -> assignation .

    ;               reduce using rule 5 (statement -> assignation .)
    $end            reduce using rule 5 (statement -> assignation .)
    }               reduce using rule 5 (statement -> assignation .)


state 4

    (3) structure -> FOR . ( assignation ; expression ; expression ) { programme }

    (               shift and go to state 16


state 5

    (7) statement -> LINE . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . NUMBER
    (12) expression -> . IDENTIFIER
    (13) expression -> . MAT
    (14) expression -> . ( expression )
    (15) expression -> . expression < expression
    (16) expression -> . expression > expression
    (17) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 13
    MAT             shift and go to state 12
    (               shift and go to state 14
    CHAR            shift and go to state 15

    expression                     shift and go to state 17

state 6

    (1) programme -> statement .
    (4) programme -> statement . ; programme

    $end            reduce using rule 1 (programme -> statement .)
    }               reduce using rule 1 (programme -> statement .)
    ;               shift and go to state 18


state 7

    (2) structure -> IF . expression { programme }
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . NUMBER
    (12) expression -> . IDENTIFIER
    (13) expression -> . MAT
    (14) expression -> . ( expression )
    (15) expression -> . expression < expression
    (16) expression -> . expression > expression
    (17) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 13
    MAT             shift and go to state 12
    (               shift and go to state 14
    CHAR            shift and go to state 15

    expression                     shift and go to state 19

state 8

    (18) assignation -> IDENTIFIER . = expression

    =               shift and go to state 20


state 9

    (0) S' -> programme .



state 10

    (8) statement -> SIZE expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (15) expression -> expression . < expression
    (16) expression -> expression . > expression

    ;               reduce using rule 8 (statement -> SIZE expression .)
    $end            reduce using rule 8 (statement -> SIZE expression .)
    }               reduce using rule 8 (statement -> SIZE expression .)
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 21
    <               shift and go to state 24
    >               shift and go to state 23


state 11

    (11) expression -> NUMBER .

    )               reduce using rule 11 (expression -> NUMBER .)
    ADD_OP          reduce using rule 11 (expression -> NUMBER .)
    MUL_OP          reduce using rule 11 (expression -> NUMBER .)
    <               reduce using rule 11 (expression -> NUMBER .)
    >               reduce using rule 11 (expression -> NUMBER .)
    ;               reduce using rule 11 (expression -> NUMBER .)
    $end            reduce using rule 11 (expression -> NUMBER .)
    }               reduce using rule 11 (expression -> NUMBER .)
    {               reduce using rule 11 (expression -> NUMBER .)


state 12

    (13) expression -> MAT .

    )               reduce using rule 13 (expression -> MAT .)
    ADD_OP          reduce using rule 13 (expression -> MAT .)
    MUL_OP          reduce using rule 13 (expression -> MAT .)
    <               reduce using rule 13 (expression -> MAT .)
    >               reduce using rule 13 (expression -> MAT .)
    ;               reduce using rule 13 (expression -> MAT .)
    $end            reduce using rule 13 (expression -> MAT .)
    }               reduce using rule 13 (expression -> MAT .)
    {               reduce using rule 13 (expression -> MAT .)


state 13

    (12) expression -> IDENTIFIER .

    )               reduce using rule 12 (expression -> IDENTIFIER .)
    ADD_OP          reduce using rule 12 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 12 (expression -> IDENTIFIER .)
    <               reduce using rule 12 (expression -> IDENTIFIER .)
    >               reduce using rule 12 (expression -> IDENTIFIER .)
    ;               reduce using rule 12 (expression -> IDENTIFIER .)
    $end            reduce using rule 12 (expression -> IDENTIFIER .)
    }               reduce using rule 12 (expression -> IDENTIFIER .)
    {               reduce using rule 12 (expression -> IDENTIFIER .)


state 14

    (14) expression -> ( . expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . NUMBER
    (12) expression -> . IDENTIFIER
    (13) expression -> . MAT
    (14) expression -> . ( expression )
    (15) expression -> . expression < expression
    (16) expression -> . expression > expression
    (17) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 13
    MAT             shift and go to state 12
    (               shift and go to state 14
    CHAR            shift and go to state 15

    expression                     shift and go to state 25

state 15

    (17) expression -> CHAR .

    )               reduce using rule 17 (expression -> CHAR .)
    ADD_OP          reduce using rule 17 (expression -> CHAR .)
    MUL_OP          reduce using rule 17 (expression -> CHAR .)
    <               reduce using rule 17 (expression -> CHAR .)
    >               reduce using rule 17 (expression -> CHAR .)
    ;               reduce using rule 17 (expression -> CHAR .)
    $end            reduce using rule 17 (expression -> CHAR .)
    }               reduce using rule 17 (expression -> CHAR .)
    {               reduce using rule 17 (expression -> CHAR .)


state 16

    (3) structure -> FOR ( . assignation ; expression ; expression ) { programme }
    (18) assignation -> . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 8

    assignation                    shift and go to state 26

state 17

    (7) statement -> LINE expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (15) expression -> expression . < expression
    (16) expression -> expression . > expression

    ;               reduce using rule 7 (statement -> LINE expression .)
    $end            reduce using rule 7 (statement -> LINE expression .)
    }               reduce using rule 7 (statement -> LINE expression .)
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 21
    <               shift and go to state 24
    >               shift and go to state 23


state 18

    (4) programme -> statement ; . programme
    (1) programme -> . statement
    (4) programme -> . statement ; programme
    (5) statement -> . assignation
    (6) statement -> . structure
    (7) statement -> . LINE expression
    (8) statement -> . SIZE expression
    (18) assignation -> . IDENTIFIER = expression
    (2) structure -> . IF expression { programme }
    (3) structure -> . FOR ( assignation ; expression ; expression ) { programme }

    LINE            shift and go to state 5
    SIZE            shift and go to state 2
    IDENTIFIER      shift and go to state 8
    IF              shift and go to state 7
    FOR             shift and go to state 4

    structure                      shift and go to state 1
    assignation                    shift and go to state 3
    programme                      shift and go to state 27
    statement                      shift and go to state 6

state 19

    (2) structure -> IF expression . { programme }
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (15) expression -> expression . < expression
    (16) expression -> expression . > expression

    {               shift and go to state 28
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 21
    <               shift and go to state 24
    >               shift and go to state 23


state 20

    (18) assignation -> IDENTIFIER = . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . NUMBER
    (12) expression -> . IDENTIFIER
    (13) expression -> . MAT
    (14) expression -> . ( expression )
    (15) expression -> . expression < expression
    (16) expression -> . expression > expression
    (17) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 13
    MAT             shift and go to state 12
    (               shift and go to state 14
    CHAR            shift and go to state 15

    expression                     shift and go to state 29

state 21

    (10) expression -> expression MUL_OP . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . NUMBER
    (12) expression -> . IDENTIFIER
    (13) expression -> . MAT
    (14) expression -> . ( expression )
    (15) expression -> . expression < expression
    (16) expression -> . expression > expression
    (17) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 13
    MAT             shift and go to state 12
    (               shift and go to state 14
    CHAR            shift and go to state 15

    expression                     shift and go to state 30

state 22

    (9) expression -> expression ADD_OP . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . NUMBER
    (12) expression -> . IDENTIFIER
    (13) expression -> . MAT
    (14) expression -> . ( expression )
    (15) expression -> . expression < expression
    (16) expression -> . expression > expression
    (17) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 13
    MAT             shift and go to state 12
    (               shift and go to state 14
    CHAR            shift and go to state 15

    expression                     shift and go to state 31

state 23

    (16) expression -> expression > . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . NUMBER
    (12) expression -> . IDENTIFIER
    (13) expression -> . MAT
    (14) expression -> . ( expression )
    (15) expression -> . expression < expression
    (16) expression -> . expression > expression
    (17) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 13
    MAT             shift and go to state 12
    (               shift and go to state 14
    CHAR            shift and go to state 15

    expression                     shift and go to state 32

state 24

    (15) expression -> expression < . expression
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . NUMBER
    (12) expression -> . IDENTIFIER
    (13) expression -> . MAT
    (14) expression -> . ( expression )
    (15) expression -> . expression < expression
    (16) expression -> . expression > expression
    (17) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 13
    MAT             shift and go to state 12
    (               shift and go to state 14
    CHAR            shift and go to state 15

    expression                     shift and go to state 33

state 25

    (14) expression -> ( expression . )
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (15) expression -> expression . < expression
    (16) expression -> expression . > expression

    )               shift and go to state 34
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 21
    <               shift and go to state 24
    >               shift and go to state 23


state 26

    (3) structure -> FOR ( assignation . ; expression ; expression ) { programme }

    ;               shift and go to state 35


state 27

    (4) programme -> statement ; programme .

    $end            reduce using rule 4 (programme -> statement ; programme .)
    }               reduce using rule 4 (programme -> statement ; programme .)


state 28

    (2) structure -> IF expression { . programme }
    (1) programme -> . statement
    (4) programme -> . statement ; programme
    (5) statement -> . assignation
    (6) statement -> . structure
    (7) statement -> . LINE expression
    (8) statement -> . SIZE expression
    (18) assignation -> . IDENTIFIER = expression
    (2) structure -> . IF expression { programme }
    (3) structure -> . FOR ( assignation ; expression ; expression ) { programme }

    LINE            shift and go to state 5
    SIZE            shift and go to state 2
    IDENTIFIER      shift and go to state 8
    IF              shift and go to state 7
    FOR             shift and go to state 4

    structure                      shift and go to state 1
    assignation                    shift and go to state 3
    programme                      shift and go to state 36
    statement                      shift and go to state 6

state 29

    (18) assignation -> IDENTIFIER = expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (15) expression -> expression . < expression
    (16) expression -> expression . > expression

    ;               reduce using rule 18 (assignation -> IDENTIFIER = expression .)
    $end            reduce using rule 18 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 18 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 21
    <               shift and go to state 24
    >               shift and go to state 23


state 30

    (10) expression -> expression MUL_OP expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (15) expression -> expression . < expression
    (16) expression -> expression . > expression

    )               reduce using rule 10 (expression -> expression MUL_OP expression .)
    ADD_OP          reduce using rule 10 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 10 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 10 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 10 (expression -> expression MUL_OP expression .)
    }               reduce using rule 10 (expression -> expression MUL_OP expression .)
    {               reduce using rule 10 (expression -> expression MUL_OP expression .)
    <               shift and go to state 24
    >               shift and go to state 23

  ! <               [ reduce using rule 10 (expression -> expression MUL_OP expression .) ]
  ! >               [ reduce using rule 10 (expression -> expression MUL_OP expression .) ]
  ! ADD_OP          [ shift and go to state 22 ]
  ! MUL_OP          [ shift and go to state 21 ]


state 31

    (9) expression -> expression ADD_OP expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (15) expression -> expression . < expression
    (16) expression -> expression . > expression

    )               reduce using rule 9 (expression -> expression ADD_OP expression .)
    ADD_OP          reduce using rule 9 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 9 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 9 (expression -> expression ADD_OP expression .)
    }               reduce using rule 9 (expression -> expression ADD_OP expression .)
    {               reduce using rule 9 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 21
    <               shift and go to state 24
    >               shift and go to state 23

  ! MUL_OP          [ reduce using rule 9 (expression -> expression ADD_OP expression .) ]
  ! <               [ reduce using rule 9 (expression -> expression ADD_OP expression .) ]
  ! >               [ reduce using rule 9 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 22 ]


state 32

    (16) expression -> expression > expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (15) expression -> expression . < expression
    (16) expression -> expression . > expression

    )               reduce using rule 16 (expression -> expression > expression .)
    ADD_OP          reduce using rule 16 (expression -> expression > expression .)
    MUL_OP          reduce using rule 16 (expression -> expression > expression .)
    <               reduce using rule 16 (expression -> expression > expression .)
    ;               reduce using rule 16 (expression -> expression > expression .)
    $end            reduce using rule 16 (expression -> expression > expression .)
    }               reduce using rule 16 (expression -> expression > expression .)
    {               reduce using rule 16 (expression -> expression > expression .)
    >               shift and go to state 23

  ! >               [ reduce using rule 16 (expression -> expression > expression .) ]
  ! ADD_OP          [ shift and go to state 22 ]
  ! MUL_OP          [ shift and go to state 21 ]
  ! <               [ shift and go to state 24 ]


state 33

    (15) expression -> expression < expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (15) expression -> expression . < expression
    (16) expression -> expression . > expression

    )               reduce using rule 15 (expression -> expression < expression .)
    ADD_OP          reduce using rule 15 (expression -> expression < expression .)
    MUL_OP          reduce using rule 15 (expression -> expression < expression .)
    ;               reduce using rule 15 (expression -> expression < expression .)
    $end            reduce using rule 15 (expression -> expression < expression .)
    }               reduce using rule 15 (expression -> expression < expression .)
    {               reduce using rule 15 (expression -> expression < expression .)
    <               shift and go to state 24
    >               shift and go to state 23

  ! <               [ reduce using rule 15 (expression -> expression < expression .) ]
  ! >               [ reduce using rule 15 (expression -> expression < expression .) ]
  ! ADD_OP          [ shift and go to state 22 ]
  ! MUL_OP          [ shift and go to state 21 ]


state 34

    (14) expression -> ( expression ) .

    )               reduce using rule 14 (expression -> ( expression ) .)
    ADD_OP          reduce using rule 14 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 14 (expression -> ( expression ) .)
    <               reduce using rule 14 (expression -> ( expression ) .)
    >               reduce using rule 14 (expression -> ( expression ) .)
    ;               reduce using rule 14 (expression -> ( expression ) .)
    $end            reduce using rule 14 (expression -> ( expression ) .)
    }               reduce using rule 14 (expression -> ( expression ) .)
    {               reduce using rule 14 (expression -> ( expression ) .)


state 35

    (3) structure -> FOR ( assignation ; . expression ; expression ) { programme }
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . NUMBER
    (12) expression -> . IDENTIFIER
    (13) expression -> . MAT
    (14) expression -> . ( expression )
    (15) expression -> . expression < expression
    (16) expression -> . expression > expression
    (17) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 13
    MAT             shift and go to state 12
    (               shift and go to state 14
    CHAR            shift and go to state 15

    expression                     shift and go to state 37

state 36

    (2) structure -> IF expression { programme . }

    }               shift and go to state 38


state 37

    (3) structure -> FOR ( assignation ; expression . ; expression ) { programme }
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (15) expression -> expression . < expression
    (16) expression -> expression . > expression

    ;               shift and go to state 39
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 21
    <               shift and go to state 24
    >               shift and go to state 23


state 38

    (2) structure -> IF expression { programme } .

    ;               reduce using rule 2 (structure -> IF expression { programme } .)
    $end            reduce using rule 2 (structure -> IF expression { programme } .)
    }               reduce using rule 2 (structure -> IF expression { programme } .)


state 39

    (3) structure -> FOR ( assignation ; expression ; . expression ) { programme }
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . NUMBER
    (12) expression -> . IDENTIFIER
    (13) expression -> . MAT
    (14) expression -> . ( expression )
    (15) expression -> . expression < expression
    (16) expression -> . expression > expression
    (17) expression -> . CHAR

    NUMBER          shift and go to state 11
    IDENTIFIER      shift and go to state 13
    MAT             shift and go to state 12
    (               shift and go to state 14
    CHAR            shift and go to state 15

    expression                     shift and go to state 40

state 40

    (3) structure -> FOR ( assignation ; expression ; expression . ) { programme }
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression
    (15) expression -> expression . < expression
    (16) expression -> expression . > expression

    )               shift and go to state 41
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 21
    <               shift and go to state 24
    >               shift and go to state 23


state 41

    (3) structure -> FOR ( assignation ; expression ; expression ) . { programme }

    {               shift and go to state 42


state 42

    (3) structure -> FOR ( assignation ; expression ; expression ) { . programme }
    (1) programme -> . statement
    (4) programme -> . statement ; programme
    (5) statement -> . assignation
    (6) statement -> . structure
    (7) statement -> . LINE expression
    (8) statement -> . SIZE expression
    (18) assignation -> . IDENTIFIER = expression
    (2) structure -> . IF expression { programme }
    (3) structure -> . FOR ( assignation ; expression ; expression ) { programme }

    LINE            shift and go to state 5
    SIZE            shift and go to state 2
    IDENTIFIER      shift and go to state 8
    IF              shift and go to state 7
    FOR             shift and go to state 4

    structure                      shift and go to state 1
    assignation                    shift and go to state 3
    programme                      shift and go to state 43
    statement                      shift and go to state 6

state 43

    (3) structure -> FOR ( assignation ; expression ; expression ) { programme . }

    }               shift and go to state 44


state 44

    (3) structure -> FOR ( assignation ; expression ; expression ) { programme } .

    ;               reduce using rule 3 (structure -> FOR ( assignation ; expression ; expression ) { programme } .)
    $end            reduce using rule 3 (structure -> FOR ( assignation ; expression ; expression ) { programme } .)
    }               reduce using rule 3 (structure -> FOR ( assignation ; expression ; expression ) { programme } .)

